import{_ as e,o as t,c as a,d as r}from"./app.d2608a1e.js";const s="/xuanmu-blogs/assets/img-2023-06-26-16-35-58.6dd5717e.png",i="/xuanmu-blogs/assets/img-2023-06-26-16-42-33.140861f3.png",d="/xuanmu-blogs/assets/img-2023-06-26-16-49-44.e866187d.png",n="/xuanmu-blogs/assets/img-2023-06-26-16-50-33.f2573bb3.png",p="/xuanmu-blogs/assets/img-2023-06-26-16-53-43.4a8fd799.png",b=JSON.parse('{"title":"2.1 WPS概念模型","description":"第二章：网络处理服务（WPS）","frontmatter":{"title":"2.1 WPS概念模型","description":"第二章：网络处理服务（WPS）","date":"2023-6-26","tags":["OGC WPS理论方法及开发实践"]},"headers":[{"level":2,"title":"2.1 WPS 概念模型","slug":"_2-1-wps-概念模型","link":"#_2-1-wps-概念模型","children":[{"level":3,"title":"2.1.1  服务发现","slug":"_2-1-1-服务发现","link":"#_2-1-1-服务发现","children":[]},{"level":3,"title":"2.1.2 服务能力","slug":"_2-1-2-服务能力","link":"#_2-1-2-服务能力","children":[]},{"level":3,"title":"2.1.3 抽象过程模型","slug":"_2-1-3-抽象过程模型","link":"#_2-1-3-抽象过程模型","children":[]},{"level":3,"title":"2.1.4 作业控制","slug":"_2-1-4-作业控制","link":"#_2-1-4-作业控制","children":[]},{"level":3,"title":"2.1.5 流程执行","slug":"_2-1-5-流程执行","link":"#_2-1-5-流程执行","children":[]},{"level":3,"title":"2.1.6 按值和按引用进行数据传输","slug":"_2-1-6-按值和按引用进行数据传输","link":"#_2-1-6-按值和按引用进行数据传输","children":[]}]}],"relativePath":"knowledge/(2)专著_第二章：网络处理服务(WPS)/2.1 WPS概念模型.md"}'),l={name:"knowledge/(2)专著_第二章：网络处理服务(WPS)/2.1 WPS概念模型.md"},_=r('<h2 id="_2-1-wps-概念模型" tabindex="-1">2.1 WPS 概念模型 <a class="header-anchor" href="#_2-1-wps-概念模型" aria-hidden="true">#</a></h2><p>WPS 服务模型定义了任何 WPS 服务器的基本属性。WPS 服务器是一种 Web 服务，可提供对预定义流程的访问，并提供作业控制操作来实例化、控制和监视处理作业（图 2.1）。 <img src="'+s+'" alt=""></p><p>图<em>2.1</em>：WPS 服务模型的工件</p><h3 id="_2-1-1-服务发现" tabindex="-1">2.1.1 服务发现 <a class="header-anchor" href="#_2-1-1-服务发现" aria-hidden="true">#</a></h3><p>任何WPS 服务器都应该是自包含的，即提供可由WPS 客户端用来确定服务器功能的初始端点。这要求（1）所有 WPS 服务器均应有一个初始端点 (HTTP URI)；（2）<em>该服务应为所有服务功能提供系统的发现机制。</em>；（3）<em>服务功能的发现机制应可从初始端点预测。</em></p><h3 id="_2-1-2-服务能力" tabindex="-1">2.1.2 服务能力 <a class="header-anchor" href="#_2-1-2-服务能力" aria-hidden="true">#</a></h3><p>任何 WPS 服务器的基本功能都分为两类：第一类包括进程发现和进程描述检索的功能。第二类包括管理和监控处理作业的能力。由于 WPS 服务器提供的进程可能具有不同程度的复杂性，因此服务器应指示每个进程提供的允许的作业控制功能模式。进一步的服务能力，即用于安全通信和用户认证的服务能力可以与服务一起提供，但是只要它们不改变或改变其他作业控制能力的语义，则WPS规范既不覆盖也不限制它们。</p><p>因此WPS规范要求：（1） <em>服务应提供流程提供功能。此功能向服务客户端通知可用的流程。</em>（2）<em>所有流程产品均应为其所使用的流程模型提供标识符。</em>（3）<em>服务应提供作业控制和监视功能。这些功能使服务客户端能够通过服务接口管理处理作业。</em>（4）<em>服务应指示每个进程允许的作业控制功能。</em></p><h3 id="_2-1-3-抽象过程模型" tabindex="-1">2.1.3 抽象过程模型 <a class="header-anchor" href="#_2-1-3-抽象过程模型" aria-hidden="true">#</a></h3><p>抽象流程模型指定了可与 WPS 结合使用的流程产品的一般要求。流程及其输入和输出都是具有同一性的元素。过程输入可以具有任意定义的值基数，即对于给定输入，可以提交多个数据集来执行。流程输出的值基数始终为 1。过程输入和输出也可以嵌套。输入和输出的标识符应是唯一的。对于嵌套的孩子来说，有一个独特的嵌套路径就足够了。任何没有子元素的输入和输出都应具有已定义的数据类型，以便客户端了解流程执行的有效数据格式。</p><p>抽象流程模型为流程描述提供了许多自由度。但是，它不会对非常简单的流程施加额外的复杂性。 <img src="'+i+'" alt=""></p><p>图<em>2.2</em>：抽象流程模型UML类图</p><p>**流程输出可以根据图 2.2 进行嵌套。*嵌套输出的标识符在其嵌套节点内应是唯一的。***所有不用作嵌套父级的输入和输出应具有定义的数据格式。<em>如果输入和输出需要编码属性，则这些属性应限于表 2.1 中定义的属性。</em></p><p><strong>表2.1 数据编码属性</strong></p><table><thead><tr><th>属性</th><th>定义</th></tr></thead><tbody><tr><td>mimetype</td><td>数据的媒体类型。</td></tr><tr><td>encoding</td><td>使用的编码过程或字符集 (例如 raw, base64, or UTF-8).</td></tr><tr><td>schema</td><td>数据架构的标识。</td></tr></tbody></table><h3 id="_2-1-4-作业控制" tabindex="-1">2.1.4 作业控制 <a class="header-anchor" href="#_2-1-4-作业控制" aria-hidden="true">#</a></h3><p>执行功能允许 WPS 客户端实例化并运行处理作业，这是最突出的作业控制功能。此外，驳回或删除作业的能力对于长时间运行的进程非常有用。*此功能使服务客户端能够表明他们不再对作业或其结果感兴趣，并允许服务器尽快释放相关资源。*<em>每个作业会被分配一个唯一的标识符</em>，<em>如果客户端尝试使用无效的作业标识符，服务应返回异常。</em></p><p>根据定义，处理作业是由处理服务创建的服务器端对象，以响应特定的流程执行。它由流程定义（即 WPS 服务器功能中定义的流程产品之一）、WPS 客户端提供或指定的输入数据以及作业完成时最终交付的输出组成。</p><p>由于处理作业是服务器端对象，因此 WPS 客户端无法自行检查作业的状态。因此，服务器应该为每个作业提供唯一的标识符。为了隐私，建议在客户端和服务器之间对该标识符保密。</p><p>对于以异步模式运行的作业，WPS 服务器还应提供监控信息，并且还可能包含完成时间的估计或与状态轮询相关的附加元素。</p><p>如果客户端在状态信息中发现轮询时间，则应尊重该轮询时间并采取相应的行为。该服务可能依赖于客户端在此时大致轮询来获取更新的状态信息。</p><p>如果客户端在状态信息中发现到期日期，则应尊重该日期并采取相应的行为，即确保按时评估执行结果并在从服务器删除作业之前检索输出。此要求允许强大的 WPS 实施和服务器资源的及时重新分配。</p><h3 id="_2-1-5-流程执行" tabindex="-1">2.1.5 流程执行 <a class="header-anchor" href="#_2-1-5-流程执行" aria-hidden="true">#</a></h3><p>WPS 服务器上的流程执行可以同步运行（图 2.3），也可以异步运行（参见图 2.4）。同步执行对于耗时相对较短的作业来说是一种合适的方法[<a href="https://docs.ogc.org/is/14-065/14-065.html#fn2" target="_blank" rel="noreferrer">2]</a>完成. 对于可能需要很长时间才能完成的作业，异步执行是更可取的。</p><p>在同步情况下，WPS客户端向WPS服务器提交执行请求，并持续监听响应，直到处理作业完成并返回处理结果。这需要客户端和服务器之间有持久的连接。 <img src="'+d+'" alt=""></p><p>图<em>2.3</em>：同步流程执行UML序列图</p><p>在异步情况下，客户端向WPS服务器发送执行请求并立即接收状态信息响应。此信息确认服务器已接收并接受请求，并且已创建处理作业并将在将来运行。状态信息响应还包含客户端在检查执行是否已完成时使用的处理作业标识符。（客户端还可以使用可用的引导功能来管理处理作业。）此外，状态信息响应包含结果位置，即处理作业完成后可以在其中找到处理结果的URL。</p><p><img src="'+n+'" alt=""></p><p>图2.4：异步流程执行UML序列图</p><h3 id="_2-1-6-按值和按引用进行数据传输" tabindex="-1">2.1.6 按值和按引用进行数据传输 <a class="header-anchor" href="#_2-1-6-按值和按引用进行数据传输" aria-hidden="true">#</a></h3><p>WPS 客户端和服务器之间的数据交换需要就通用数据交换模式和合适的通信协议达成一致。该规范定义了WPS客户端和服务器之间数据交换的两种通用数据传输模式。</p><p>客户端可以通过两种不同的方式向进程发送输入数据或从进程接收输出数据：(1) 通过引用，以及 (2) 通过值（参见图 2.5）。为了简洁起见，该图仅显示了纯粹形式的传输模式，即相同的模式用于所有输入和输出。然而，混合模式是可能的。通常，小数据或原子数据（例如整数、双精度数或短字符串）按值提交。大数据输入（输出）通常通过引用提供。<em>如果客户端指定了不支持的传输模式，服务应返回异常。</em><img src="'+p+'" alt=""></p><p>图2.5：“按值”和“按引用”执行调用和响应 UML 序列图</p>',33),h=[_];function m(o,c,S,P,g,W){return t(),a("div",null,h)}const f=e(l,[["render",m]]);export{b as __pageData,f as default};
