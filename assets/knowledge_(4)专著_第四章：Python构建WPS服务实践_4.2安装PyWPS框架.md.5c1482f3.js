import{_ as s,o as a,c as p,d as e}from"./app.a6d25243.js";const n="/xuanmu-blogs/assets/img-2023-06-28-16-50-07.b4929225.png",l="/xuanmu-blogs/assets/img-2023-06-28-17-00-34.fe1d356b.png",t="/xuanmu-blogs/assets/img-2023-06-28-17-02-08.b4d2be56.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"4.2 PyWPS的安装与使用","slug":"_4-2-pywps的安装与使用","link":"#_4-2-pywps的安装与使用","children":[{"level":3,"title":"4.2.1 依赖关系和要求(Linux安装)","slug":"_4-2-1-依赖关系和要求-linux安装","link":"#_4-2-1-依赖关系和要求-linux安装","children":[]},{"level":3,"title":"4.2.2 Windows 安装","slug":"_4-2-2-windows-安装","link":"#_4-2-2-windows-安装","children":[]}]}],"relativePath":"knowledge/(4)专著_第四章：Python构建WPS服务实践/4.2安装PyWPS框架.md"}'),o={name:"knowledge/(4)专著_第四章：Python构建WPS服务实践/4.2安装PyWPS框架.md"},i=e(`<h2 id="_4-2-pywps的安装与使用" tabindex="-1">4.2 PyWPS的安装与使用 <a class="header-anchor" href="#_4-2-pywps的安装与使用" aria-hidden="true">#</a></h2><h3 id="_4-2-1-依赖关系和要求-linux安装" tabindex="-1">4.2.1 依赖关系和要求(Linux安装) <a class="header-anchor" href="#_4-2-1-依赖关系和要求-linux安装" aria-hidden="true">#</a></h3><p>PyWPS 在 Python 2.7、3.3 或更高版本上运行。PyWPS 目前在 Linux（主要是 Ubuntu）上进行测试和开发。在安装 PyWPS 之前，必须在系统中安装 GDAL 的 Git 和 Python 绑定。<em>在基于 Debian 的系统中，可以使用apt</em>等工具安装这些软件包：</p><p><code>$ sudo apt-get install git python-gdal</code></p><p>或者，如果 GDAL 已安装在您的系统上，您可以通过 pip 安装 GDAL Python 绑定：</p><p><code>$ pip install GDAL==1.10.0 --global-option=build_ext --global-option=&quot;-I/usr/include/gdal&quot;</code></p><ol><li>使用pip:安装 PyWPS 最简单的方法是使用 Python 包索引 (PIP)。它从存储库中获取源代码并自动将其安装在系统中。这可能需要超级用户权限（例如基于 Debian 的系统中的<em>sudo</em>）：</li></ol><p><code>$ sudo pip install -e git+https://github.com/geopython/pywps.git@master#egg=pywps-dev</code></p><ol start="2"><li><p>手动安装：手动安装 PyWPS 需要<a href="https://pywps.org/download" target="_blank" rel="noreferrer">下载</a>源代码，然后使用setup.py脚本。再次是基于 Debian 的系统的示例（注意sudo的安装用法）：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ tar zxf pywps-x.y.z.tar.gz</span></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> pywps-x.y.z/</span></span>
<span class="line"></span></code></pre></div><p>然后使用 pip 安装包依赖项：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ pip install -r requirements.txt</span></span>
<span class="line"><span style="color:#A6ACCD;">$ pip install -r requirements-gdal.txt  </span><span style="color:#676E95;"># 用于GDAL Python绑定 (如果 python-gdal 没有通过 apt-get被安装)</span></span>
<span class="line"><span style="color:#A6ACCD;">$ pip install -r requirements-dev.txt  </span><span style="color:#676E95;"># 对于开发人员任务</span></span>
<span class="line"></span></code></pre></div><p>要在系统范围内安装 PyWPS，请运行：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ sudo python setup.py install</span></span>
<span class="line"></span></code></pre></div></li></ol><h3 id="_4-2-2-windows-安装" tabindex="-1">4.2.2 Windows 安装 <a class="header-anchor" href="#_4-2-2-windows-安装" aria-hidden="true">#</a></h3><p>要使用 PyWPS，用户必须对流程进行编码并通过服务发布它们。官方提供了一个示例服务，为首次使用的用户提供了一个良好的起点。它启动了一个非常简单的内置服务器（依赖于<a href="http://flask.pocoo.org/" target="_blank" rel="noreferrer">Flask Python Microframework</a>），这对于测试来说足够好。该示例服务可以直接克隆到用户区域：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ git clone https://github.com/geopython/pywps-flask.git</span></span>
<span class="line"></span></code></pre></div><p>PyWPS 未在 MS Windows 平台上进行测试。这主要是因为缺少多处理库。它用于处理异步执行，即在发出存储响应文档的请求并更新显示执行进度的状态文档时。因此我们通过Docker来安装PyWPS。</p><p>第一步，在DockerHub中搜索PyWPS，并找到可用的Docker镜像pywps/flask-alpine，如图4.X所示。</p><p><img src="`+n+'" alt=""></p><p>第二步，打开终端，在命令行中输入<code>docker pull pywps/flask-alpine:3.6</code> 拉取镜像，拉取成功后输入<code>docker run -p 5551:5000 pywps/flask-alpine:3.6</code>启动镜像，其中-p是端口映射，我们以端口号5551启动该镜像。在Docker Desktop中可以看到镜像已经被启动。</p><p><img src="'+l+'" alt=""></p><p>第三步，在浏览器中输入<code>http://localhost:5551/</code> 并回车，可以看到一个PyWPS的页面已经被打开，此时说明拉取的镜像已经成功部署并启动。</p><p><img src="'+t+'" alt=""></p>',19),c=[i];function r(d,y,h,u,_,g){return a(),p("div",null,c)}const b=s(o,[["render",r]]);export{m as __pageData,b as default};
