import{_ as a,o as _,c as n,a as e,e as t}from"./app.23d330c5.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"6.2.1 计划的目的","slug":"_6-2-1-计划的目的","link":"#_6-2-1-计划的目的","children":[]},{"level":3,"title":"6.2.2 XML文档的结构","slug":"_6-2-2-xml文档的结构","link":"#_6-2-2-xml文档的结构","children":[]}],"relativePath":"knowledge/(6)专著_第六章：WPS流程构建与实现/6.1流程链接工具.md"}'),s={name:"knowledge/(6)专著_第六章：WPS流程构建与实现/6.1流程链接工具.md"},o=e("h3",{id:"_6-2-1-计划的目的",tabindex:"-1"},[t("6.2.1 计划的目的 "),e("a",{class:"header-anchor",href:"#_6-2-1-计划的目的","aria-hidden":"true"},"#")],-1),l=e("p",null,"该程序是对允许链接WPS进程的PyWPS的扩展。该工作流被描述为一个XML文档。可以将该文档发送到PyWPS，在那里将其转换为一个PyWPS流程并进行注册。然后，它就可以像正常的PyWPS进程一样执行。",-1),r=e("h3",{id:"_6-2-2-xml文档的结构",tabindex:"-1"},[t("6.2.2 XML文档的结构 "),e("a",{class:"header-anchor",href:"#_6-2-2-xml文档的结构","aria-hidden":"true"},"#")],-1),d=e("p",null,"XML有三个部分，即输入部分、描述流程的部分和输出部分。 每个工作流都以根元素“WORKFORK”和属性“IDENTIFIER”开始，该属性是工作流的名称，以后可以使用该名称将其作为一个PyWPS流程进行调用。",-1),c=[o,l,r,d];function i(h,P,p,m,u,x){return _(),n("div",null,c)}const W=a(s,[["render",i]]);export{S as __pageData,W as default};
