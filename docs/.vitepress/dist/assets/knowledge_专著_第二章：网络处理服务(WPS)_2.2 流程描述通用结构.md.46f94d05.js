import{_ as t,o as d,c as r,d as e}from"./app.fca0a3ef.js";const a="/xuanmu-blogs/assets/img-2023-06-26-17-16-38.32735322.png",s="/xuanmu-blogs/assets/img-2023-06-26-17-23-41.feb3dec8.png",u=JSON.parse('{"title":"2.2 流程描述通用结构.md","description":"第二章：网络处理服务（WPS）","frontmatter":{"title":"2.2 流程描述通用结构.md","description":"第二章：网络处理服务（WPS）","date":"2023-6-26","tags":["OGC WPS理论方法及开发实践"]},"headers":[{"level":2,"title":"2.2 流程描述通用结构","slug":"_2-2-流程描述通用结构","link":"#_2-2-流程描述通用结构","children":[{"level":3,"title":"2.2.1 通用描述类型","slug":"_2-2-1-通用描述类型","link":"#_2-2-1-通用描述类型","children":[]},{"level":3,"title":"2.2.2 进程描述","slug":"_2-2-2-进程描述","link":"#_2-2-2-进程描述","children":[]}]}],"relativePath":"knowledge/专著_第二章：网络处理服务(WPS)/2.2 流程描述通用结构.md"}'),o={name:"knowledge/专著_第二章：网络处理服务(WPS)/2.2 流程描述通用结构.md"},n=e('<h2 id="_2-2-流程描述通用结构" tabindex="-1">2.2 流程描述通用结构 <a class="header-anchor" href="#_2-2-流程描述通用结构" aria-hidden="true">#</a></h2><h3 id="_2-2-1-通用描述类型" tabindex="-1">2.2.1 通用描述类型 <a class="header-anchor" href="#_2-2-1-通用描述类型" aria-hidden="true">#</a></h3><p>流程、输入和输出的描述性元素源自 OWS Common 提供的 BasicIdentificationType（图 2.6）。其他描述性信息应以带有适当角色标识符的简单链接的形式记录在元数据元素中。<em>流程描述以及相关流程输入和输出源自 OWS 通用基本识别类型。</em><img src="'+a+'" alt=""></p><p>图2.6：流程的描述类型、流程输入和流程输出 UML 类图</p><p><strong>表 2.2 – DescriptionType 结构的属性</strong></p><table><thead><tr><th>名称</th><th>定义</th><th>数据类型和值</th><th>多样性和用途</th></tr></thead><tbody><tr><td>Title</td><td>流程、输入和输出的标题。通常可向人类显示。</td><td>ows:Title</td><td>1个（必填）</td></tr><tr><td>Abstract</td><td>流程、输入和输出的简要叙述性描述。通常可向人类显示。</td><td>ows:Abstract</td><td>0个或个（可选） 在可用且有用时包括在内。</td></tr><tr><td>Keywords</td><td>描述流程、其输入和输出的关键字。</td><td>ows:Keywords</td><td>0个或多个（可选） 在可用且有用时包括在内。</td></tr><tr><td>Identifier</td><td>流程、输入和输出的明确标识符。</td><td>ows:Identifier 值是 URI 或 HTTP- URI <strong>a</strong></td><td>1个（必填）</td></tr><tr><td>Metadata</td><td>参考有关此项目的其他元数据。</td><td>ows:Metadata 允许的值在表 2.3 中指定。</td><td>0个或多个（可选）</td></tr></tbody></table><p><u><em><strong>a</strong>不允许在 Identifier 元素中添加附加内容，例如单独的代码空间和版本属性。</em></u></p><p><strong>表 2.3 – 元数据结构的属性</strong></p><table><thead><tr><th>名称</th><th>定义</th><th>数据类型和值</th><th>多样性和用途</th></tr></thead><tbody><tr><td>Title</td><td>文档的标题。通常可向人类显示。</td><td>字符串</td><td>1个（必填）</td></tr><tr><td>Link type</td><td>xlink 的类型，固定为 simple。</td><td>字符串，固定为“simple”。</td><td>1个（必填）</td></tr><tr><td>Role</td><td>角色标识符，指示链接文档的角色。</td><td>HTTP-URI</td><td>1个（必填）</td></tr><tr><td>href</td><td>对流程、输入或输出的文档站点的引用。</td><td>HTTP-URI</td><td>1个（必填）</td></tr></tbody></table><h3 id="_2-2-2-进程描述" tabindex="-1">2.2.2 进程描述 <a class="header-anchor" href="#_2-2-2-进程描述" aria-hidden="true">#</a></h3><p>本节定义描述流程的信息结构。它包括链接到有关流程的行为和机制的文档资源的元素以及有关其输入和输出的描述性元素。流程描述模型实现并扩展了 抽象流程模型中定义的需求。</p><p>流程描述是DescriptionType 的扩展（图2.7）。它应用于表达标识符、标题和摘要，并链接到提供有关流程的附加或更详细信息的相关元数据元素。应使用附加语言属性来指示过程及其输入和输出的描述中人类可读元素的语言。</p><p>过程输入和输出的描述结构继承了DescriptionType（第2.2.1节）的公共元素。这些元素应用于表达标识符、标题和摘要，并链接到提供有关过程输入和输出的附加或更详细信息的相关元数据元素。输入和输出描述中人类可读元素的内容应遵循过程描述中指示的语言。</p><p>流程输入是流程的参数。流程输入具有基数，以便 (1) 将具有相同标识符的多个值传递给流程，或 (2) 将流程输入声明为可选（基数“0”）。输入元素可以是简单的（即输入没有附加子输入）或聚合（即输入有一个或多个附加子输入元素）。简单输入包括 DataDescription 元素的实现。聚合输入包含一个或多个子输入。</p><p>输出是过程的返回值。输出的基数为一。输出元素可以是简单的（即输出没有附加的子输出）或聚合的（即输出有一个或多个附加的子输出元素）。简单的输出包括 DataDescription 元素的实现。聚合输出包含一个或多个子输出。 <img src="'+s+'" alt=""></p><p>图2.7 流程UML类关系图</p><p><strong>表 2.4 – 流程结构</strong></p><table><thead><tr><th>名称</th><th>定义</th><th>数据类型和值</th><th>多样性和用途</th></tr></thead><tbody><tr><td>标题</td><td>继承自表2.2</td><td></td><td></td></tr><tr><td>抽象的</td><td></td><td></td><td></td></tr><tr><td>标识符</td><td></td><td></td><td></td></tr><tr><td>元数据</td><td></td><td></td><td></td></tr><tr><td>语言</td><td>人类可读的过程描述元素的语言标识符。</td><td>字符串。该语言标识符应符合 IETF RFC 4646 中的规定。</td><td>1个（必填）</td></tr><tr><td>输入</td><td>流程的输入项（参数）。</td><td>输入结构，见表2.5。</td><td>零个或多个（可选）</td></tr><tr><td>输出</td><td>过程的输出项（结果）</td><td>输出结构，见表2.6。</td><td>一项或多项（必填）</td></tr></tbody></table><p><strong>表 2.5 – 输入结构的各个部分</strong></p><table><thead><tr><th>名称</th><th>定义</th><th>数据类型和值</th><th>多样性和用途</th></tr></thead><tbody><tr><td>Title</td><td>继承自表2.2</td><td></td><td></td></tr><tr><td>Abstract</td><td></td><td></td><td></td></tr><tr><td>Keywords</td><td></td><td></td><td></td></tr><tr><td>Identifier</td><td></td><td></td><td></td></tr><tr><td>Metadata</td><td></td><td></td><td></td></tr><tr><td>minOccurs <strong>a</strong></td><td>需要此参数值的最小次数</td><td>非负整数；默认为“1”，“0”表示输入是可选的。</td><td>零或一 （可选）</td></tr><tr><td>maxOccurs <strong>a</strong></td><td>该参数可能出现的最大次数</td><td>非负整数，默认为“1”。</td><td>零或一 （可选）</td></tr><tr><td>DataDescription</td><td>此输入的数据类型和域。</td><td>DataDescription的实现，即ComplexData、LiteralData、BoundingBoxData。</td><td>零或一（有条件）<strong>b</strong></td></tr><tr><td>Input</td><td>嵌套输入。<strong>C</strong></td><td>输入结构，表 2.5（本表）。</td><td>零个或多个（有条件）b</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><em><u><strong>a</strong> minOccurs 和 maxOccurs 参数与类似名称的 XML 模式出现约束具有相同的语义。 b输入应包括 DataDescription 的一种实现或任意数量的子输入。 <strong>c</strong>建议保持尽可能低的嵌套级别。</u></em></p><p><strong>表2.6 – 输出结构的各个部分</strong></p><table><thead><tr><th>名称</th><th>定义</th><th>数据类型和值</th><th>多样性和用途</th></tr></thead><tbody><tr><td>Title</td><td>继承自表2.2</td><td></td><td></td></tr><tr><td>Abstract</td><td></td><td></td><td></td></tr><tr><td>Keywords</td><td></td><td></td><td></td></tr><tr><td>Identifier</td><td></td><td></td><td></td></tr><tr><td>Metadata</td><td></td><td></td><td></td></tr><tr><td>DataDescription</td><td>此输入的数据类型和域。</td><td>DataDescription的实现，即ComplexData、LiteralData、BoundingBoxData。</td><td>零或一（有条件）</td></tr><tr><td>Output</td><td>嵌套输出。 b</td><td>输出结构，表2.6（本表）。</td><td>零个或多个（有条件）a</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><u>a输出应包括 DataDescription 的一种实现或任意数量的子输出。 b建议保持尽可能低的嵌套级别。</u></p>',24),i=[n];function h(p,c,l,_,g,b){return d(),r("div",null,i)}const D=t(o,[["render",h]]);export{u as __pageData,D as default};
