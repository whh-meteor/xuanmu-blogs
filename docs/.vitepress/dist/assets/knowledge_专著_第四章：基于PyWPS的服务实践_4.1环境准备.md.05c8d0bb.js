import{_ as a,o as e,c as s,d as t}from"./app.8e88d080.js";const o="/xuanmu-blogs/assets/img-2023-06-28-19-22-32.10bef399.png",p="/xuanmu-blogs/assets/img-2023-06-28-19-24-29.75331307.png",n="/xuanmu-blogs/assets/img-2023-06-28-19-25-27.860afbc8.png",l="/xuanmu-blogs/assets/img-2023-06-28-19-26-36.a4ce7272.png",r="/xuanmu-blogs/assets/img-2023-06-28-19-33-15.4d8616b5.png",c="/xuanmu-blogs/assets/img-2023-06-28-16-50-07.b4929225.png",i="/xuanmu-blogs/assets/img-2023-06-28-17-00-34.fe1d356b.png",d="/xuanmu-blogs/assets/img-2023-06-28-17-02-08.b4d2be56.png",P=JSON.parse('{"title":"4.1 环境准备","description":"第四章：WPS服务实践","frontmatter":{"title":"4.1 环境准备","description":"第四章：WPS服务实践","date":"2023-6-28","tags":["OGC WPS理论方法及开发实践"]},"headers":[{"level":2,"title":"4.1 环境准备","slug":"_4-1-环境准备","link":"#_4-1-环境准备","children":[{"level":3,"title":"4.1.1  Tomcat 介绍与安装","slug":"_4-1-1-tomcat-介绍与安装","link":"#_4-1-1-tomcat-介绍与安装","children":[]},{"level":3,"title":"4.1.2  Docker 介绍与安装","slug":"_4-1-2-docker-介绍与安装","link":"#_4-1-2-docker-介绍与安装","children":[]},{"level":3,"title":"4.1.3 PyWPS的安装与使用","slug":"_4-1-3-pywps的安装与使用","link":"#_4-1-3-pywps的安装与使用","children":[]}]}],"relativePath":"knowledge/专著_第四章：基于PyWPS的服务实践/4.1环境准备.md"}'),h={name:"knowledge/专著_第四章：基于PyWPS的服务实践/4.1环境准备.md"},g=t('<h2 id="_4-1-环境准备" tabindex="-1">4.1 环境准备 <a class="header-anchor" href="#_4-1-环境准备" aria-hidden="true">#</a></h2><h3 id="_4-1-1-tomcat-介绍与安装" tabindex="-1">4.1.1 Tomcat 介绍与安装 <a class="header-anchor" href="#_4-1-1-tomcat-介绍与安装" aria-hidden="true">#</a></h3><p>Tomcat是在Oracle公司的JSWDK（JavaServer Web DevelopmentKit，是Oracle公司推出的小型Servlet/JSP调试工具）的基础上发展起来的一个优秀的Servlet容器，<strong>Tomcat本身完全用Java语言编写</strong>。作为一个开源软件，Tomcat除了运行稳定、可靠，并且效率高之外，还可以和目前大部分的主流Web服务器（如IIS、Apache、Nginx等）一起工作。</p><p>tomcat的版本实际上比较复杂，目前有7、8、9、10四个版本并行发布，在安装它之前我们需要在电脑上配置好JDK环境，具体的各个版本的兼容信息我们可以通过官网查询。安装Tomcat服务器，为WPS服务发布和数据资源发布提供环境。</p><p>第一步，在Tomcat官网(<a href="http://tomcat.apache.org/" target="_blank" rel="noreferrer">http://tomcat.apache.org/</a>)下载Zip到指定目录中并解压，这一步不需要安装过程。</p><p><img src="'+o+'" alt=""></p><p>第二步，配置Tomcat环境变量。首先复制Tomcat的安装路径（如D:\\apache-tomcat-9.0.43），然后在【此电脑】→【属性】→【高级系统设置】→【环境变量】中新建变量名，【系统变量】→【新建】→变量名：CATALINA_HOME 变量值：Tomcat的安装路径→【确定】，如图4.1所示。最后在【Path】→【编辑】→【新建】→输入%CATALINA_HOME%\\bin，如图4.2所示。</p><p><img src="'+p+'" alt=""><img src="'+n+'" alt=""></p><p>第三步，启动并测试Tomcat。 在Tomcat安装路径下的bin目录里找到startup.bat，双击运行，保持窗口打开状态。 打开浏览器，在地址栏输入<a href="http://localhost:8080/%E6%88%96http://127.0.0.1:8080/%EF%BC%8C%E8%83%BD%E7%9C%8B%E5%88%B0Tomcat%E9%A6%96%E9%A1%B5%E5%8D%B3%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F(%E8%8B%A5%E5%87%BA%E7%8E%B0%E9%97%AA%E9%80%80%E7%8E%B0%E8%B1%A1%EF%BC%8C%E8%AF%B7%E5%85%88%E6%A3%80%E6%9F%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE)%EF%BC%8C%E5%A6%82%E5%9B%BE4.3%E6%89%80%E7%A4%BA%E3%80%82%E5%A6%82%E6%9E%9C%E5%85%B3%E9%97%ADTomcat%E7%AA%97%E5%8F%A3%EF%BC%8C%E5%88%99Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%B3%E9%97%AD%E3%80%82" target="_blank" rel="noreferrer">http://localhost:8080/或http://127.0.0.1:8080/，能看到Tomcat首页即启动成功(若出现闪退现象，请先检查环境变量配置是否正确)，如图4.3所示。如果关闭Tomcat窗口，则Tomcat服务器关闭。</a><img src="'+l+'" alt=""></p><h3 id="_4-1-2-docker-介绍与安装" tabindex="-1">4.1.2 Docker 介绍与安装 <a class="header-anchor" href="#_4-1-2-docker-介绍与安装" aria-hidden="true">#</a></h3><p>Docker 并非是一个通用的容器工具，它依赖于已存在并运行的 Linux 内核环境。Docker 实质上是在已经运行的 Linux 下制造了一个隔离的文件环境，因此它执行的效率几乎等同于所部署的 Linux 主机。因此，Docker 必须部署在 Linux 内核的系统上。如果其他系统想部署 Docker 就必须安装一个虚拟 Linux 环境。在 Windows 上部署 Docker 的方法都是先安装一个虚拟机，并在安装 Linux 系统的的虚拟机中运行 Docker。</p><p>第一步，安装Hyper-V 。方式一：Hyper-V 是微软开发的虚拟机，类似于 VMWare 或 VirtualBox，仅适用于 Windows 10。这是 Docker Desktop for Windows 所使用的虚拟机。【控制面板】→【程序】→【程序和功能】→【启用或关闭Widows功能】→【Hyper-V】，全部勾选并点击确定。如图4.4所示。方式二：可以通过命令来启用 Hyper-V ，请右键开始菜单并以管理员身份运行 PowerShell，执行以下命令：<code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All</code></p><p><img src="'+r+`" alt=""></p><p>第二步，安装 Docker Desktop for Windows。点击(<a href="https://hub.docker.com/?overlay=onboarding" target="_blank" rel="noreferrer">https://hub.docker.com/?overlay=onboarding</a>)，并下载 Windows 的版本，如果你还没有登录，会要求注册登录。双击下载的 Docker for Windows Installer 安装文件，一直点击【Next】，直到 【Finish】 完成安装。安装之后，可以打开 PowerShell 并运行以下命令检测是否运行成功：<code>docker run hello-world</code>.安装成功后会出现：Hello from Docker！</p><h3 id="_4-1-3-pywps的安装与使用" tabindex="-1">4.1.3 PyWPS的安装与使用 <a class="header-anchor" href="#_4-1-3-pywps的安装与使用" aria-hidden="true">#</a></h3><h4 id="_4-1-3-1-依赖关系和要求-linux安装" tabindex="-1">4.1.3.1 依赖关系和要求(Linux安装) <a class="header-anchor" href="#_4-1-3-1-依赖关系和要求-linux安装" aria-hidden="true">#</a></h4><p>PyWPS 在 Python 2.7、3.3 或更高版本上运行。PyWPS 目前在 Linux（主要是 Ubuntu）上进行测试和开发。在安装 PyWPS 之前，必须在系统中安装 GDAL 的 Git 和 Python 绑定。<em>在基于 Debian 的系统中，可以使用apt</em>等工具安装这些软件包：</p><p><code>$ sudo apt-get install git python-gdal</code></p><p>或者，如果 GDAL 已安装在您的系统上，您可以通过 pip 安装 GDAL Python 绑定：</p><p><code>$ pip install GDAL==1.10.0 --global-option=build_ext --global-option=&quot;-I/usr/include/gdal&quot;</code></p><ol><li>使用pip:安装 PyWPS 最简单的方法是使用 Python 包索引 (PIP)。它从存储库中获取源代码并自动将其安装在系统中。这可能需要超级用户权限（例如基于 Debian 的系统中的<em>sudo</em>）：</li></ol><p><code>$ sudo pip install -e git+https://github.com/geopython/pywps.git@master#egg=pywps-dev</code></p><ol start="2"><li><p>手动安装：手动安装 PyWPS 需要<a href="https://pywps.org/download" target="_blank" rel="noreferrer">下载</a>源代码，然后使用setup.py脚本。再次是基于 Debian 的系统的示例（注意sudo的安装用法）：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ tar zxf pywps-x.y.z.tar.gz</span></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> pywps-x.y.z/</span></span>
<span class="line"></span></code></pre></div><p>然后使用 pip 安装包依赖项：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ pip install -r requirements.txt</span></span>
<span class="line"><span style="color:#A6ACCD;">$ pip install -r requirements-gdal.txt  </span><span style="color:#676E95;"># 用于GDAL Python绑定 (如果 python-gdal 没有通过 apt-get被安装)</span></span>
<span class="line"><span style="color:#A6ACCD;">$ pip install -r requirements-dev.txt  </span><span style="color:#676E95;"># 对于开发人员任务</span></span>
<span class="line"></span></code></pre></div><p>要在系统范围内安装 PyWPS，请运行：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ sudo python setup.py install</span></span>
<span class="line"></span></code></pre></div></li></ol><h4 id="_4-1-3-2-windows-安装" tabindex="-1">4.1.3.2 Windows 安装 <a class="header-anchor" href="#_4-1-3-2-windows-安装" aria-hidden="true">#</a></h4><p>要使用 PyWPS，用户必须对流程进行编码并通过服务发布它们。官方提供了一个示例服务，为首次使用的用户提供了一个良好的起点。它启动了一个非常简单的内置服务器（依赖于<a href="http://flask.pocoo.org/" target="_blank" rel="noreferrer">Flask Python Microframework</a>），这对于测试来说足够好。该示例服务可以直接克隆到用户区域：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ git clone https://github.com/geopython/pywps-flask.git</span></span>
<span class="line"></span></code></pre></div><p>PyWPS 未在 MS Windows 平台上进行测试。这主要是因为缺少多处理库。它用于处理异步执行，即在发出存储响应文档的请求并更新显示执行进度的状态文档时。因此我们通过Docker来安装PyWPS。</p><p>第一步，在DockerHub中搜索PyWPS，并找到可用的Docker镜像pywps/flask-alpine，如图4.X所示。</p><p><img src="`+c+'" alt=""></p><p>第二步，打开终端，在命令行中输入<code>docker pull pywps/flask-alpine:3.6</code> 拉取镜像，拉取成功后输入<code>docker run -p 5551:5000 pywps/flask-alpine:3.6</code>启动镜像，其中-p是端口映射，我们以端口号5551启动该镜像。在Docker Desktop中可以看到镜像已经被启动。</p><p><img src="'+i+'" alt=""></p><p>第三步，在浏览器中输入<code>http://localhost:5551/</code> 并回车，可以看到一个PyWPS的页面已经被打开，此时说明拉取的镜像已经成功部署并启动。</p><p><img src="'+d+'" alt=""></p>',33),m=[g];function u(_,y,A,E,b,k){return e(),s("div",null,m)}const C=a(h,[["render",u]]);export{P as __pageData,C as default};
