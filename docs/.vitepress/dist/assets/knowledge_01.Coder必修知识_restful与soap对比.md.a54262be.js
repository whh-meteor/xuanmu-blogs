import{_ as e,o as a,c as t,d as r}from"./app.8e88d080.js";const u=JSON.parse('{"title":"restful与soap对比","description":"计算机基础","frontmatter":{"title":"restful与soap对比","description":"计算机基础","date":"2023-06-19T00:00:00.000Z","tags":["计算机"]},"headers":[{"level":2,"title":"概念方面：","slug":"概念方面","link":"#概念方面","children":[]},{"level":2,"title":"核心不同：","slug":"核心不同","link":"#核心不同","children":[]},{"level":2,"title":"协议方面：","slug":"协议方面","link":"#协议方面","children":[]},{"level":2,"title":"安全控制方面：","slug":"安全控制方面","link":"#安全控制方面","children":[]},{"level":2,"title":"缓存方面：","slug":"缓存方面","link":"#缓存方面","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"knowledge/01.Coder必修知识/restful与soap对比.md"}'),s={name:"knowledge/01.Coder必修知识/restful与soap对比.md"},l=r('<h1 id="restful与soap对比" tabindex="-1">restful与soap对比 <a class="header-anchor" href="#restful与soap对比" aria-hidden="true">#</a></h1><h2 id="概念方面" tabindex="-1">概念方面： <a class="header-anchor" href="#概念方面" aria-hidden="true">#</a></h2><p>rest接口和soap接口是完全不同的两种数据通信接口，前者使用的是http协议通信，请求的响应值可以是xml也，可以是json。后者使用的是soap协议通信，通信请求和相应都是xml，而且有wsd作为请求和响应信息的标准。</p><h2 id="核心不同" tabindex="-1">核心不同： <a class="header-anchor" href="#核心不同" aria-hidden="true">#</a></h2><p>rest 是基于http之上建立的一种接口规范，<strong>核心是资源</strong>。soap是本身一种协议，以xml格式传输。</p><p>soap 的 Web 服务以操作为中心的。</p><h2 id="协议方面" tabindex="-1">协议方面： <a class="header-anchor" href="#协议方面" aria-hidden="true">#</a></h2><p>RESTful 使用标准的 HTTP 方法 (GET/PUT/POST/DELETE) 来抽象所有 Web 系统的服务能力，SOAP 应用都通过定义自己个性化的接口方法来抽象 Web 服务。</p><h2 id="安全控制方面" tabindex="-1">安全控制方面： <a class="header-anchor" href="#安全控制方面" aria-hidden="true">#</a></h2><p>代理服务器可以制定安全策略，一般代理服务器的实现根据(URI， HTTP Method) 两元组来决定 HTTP 请求的安全合法性。当发现DELETE这样的请求时，予以拒绝。对于 SOAP，如果我们想惜助于既有的代理服务器进行安全控制，会比较尴尬。因为代理服务器需要解码SOAP的协议。这显然是不合理的。</p><h2 id="缓存方面" tabindex="-1">缓存方面： <a class="header-anchor" href="#缓存方面" aria-hidden="true">#</a></h2><p>HTTP GET 请求被设计用来节省客户端与服务器之间网络传输带来的开销，这也给客户端实现 Cache 机制提供了可能。REST 的应用可以充分地挖掘 HTTP 协议对緩存支持的能力。而所有经过缓存服务器的 SOAP 消息总是 HTTP POST，緩存服务器如果不解码SOAP 消息体，没法知道设上HTTP请求是香是想从服务器获得数据。决定了基于 SOAP 应用的緩存机制要远比 REST 复杂。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>基于 REST构建的系统其系统的扩展能力要强于 SOAP，这可以体现在它的统一接口抽象、代理服务器支持、缓存服务器支持等诸多方面。并且，伴随着 Web Site as Web Services 演进的趋势，还有由于 REST 设计实现的简单性和强扩展性的特点，有理由相信，REST 将会成为 Web 服务的一个重要架构实践领域。</p>',14),i=[l];function d(h,n,o,c,p,T){return a(),t("div",null,i)}const f=e(s,[["render",d]]);export{u as __pageData,f as default};
